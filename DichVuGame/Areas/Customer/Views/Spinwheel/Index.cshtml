@model DichVuGame.Models.ViewModels.SpinwheelViewModel
@{
    ViewData["Title"] = "SpinWheel";
}

<html>
<head>

    <link rel="stylesheet" href="\spinwheel\default.css" type="text/css" />
    <script type="text/javascript" src="\spinwheel\Winwheel.js"></script>
    <script type="text/javascript" src="\spinwheel\TweenMax.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>
<body>
    <div align="center">
        <h1>Vòng quay may mắn</h1>
        <p>
            Quà tặng hấp dẫn, trúng thưởng 100%
        </p>
        <p>
            Giá: 50000 xu/lượt
        </p>
        <div class="text-danger">@Html.ValidationMessage("OutOfBalance")</div>
        <br />
        <div class="modal fade" id="prizeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title">Chúc mừng bạn đã trúng thưởng</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                @if (Model.Coin > 0)
                                {
                                    <label>Số coin: @Model.Coin</label>
                                    <input id="coin" value="0" hidden />
                                }
                                @if (Model.Discount != null)
                                {
                                    <div>Mã giảm giá: @Model.Discount.Code</div>
                                    <div>Có giá trị giảm: @Model.Discount.DiscountValue %</div>
                                    <input id="coin" value="0" hidden />
                                }
                                @if (Model.Code != null)
                                {
                                    <div>Tựa game: <span><a asp-controller="Home" asp-action="Details" asp-route-id="@Model.Code.GameID">@Model.Code.Game.Gamename</a></span></div>
                                    <div>Mã game: @Model.Code.Gamecode</div>
                                    <input id="coin" value="0" hidden />
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-default" data-dismiss="modal" value="Xác nhận">
                        </div>
                </div>
            </div>
        </div>
        <br />
        <form asp-action="Reward" method="post" id="rewardForm">
            <table cellpadding="0" cellspacing="0" border="0">
                <tr>
                    <td>
                        <div class="power_controls">
                            <br />
                            <br />
                            <img id="spin_button" src="\spinwheel\spin_off.png" alt="Spin" onClick="startSpin();" />
                            <br /><br />
                            &nbsp;&nbsp;<a href="#" onClick="resetWheel(); return false;">Play Again</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(reset)
                        </div>
                    </td>
                    <td width="438" height="582" class="the_wheel" align="center" align="center">
                        <canvas id="canvas" width="434" height="434">
                            <p style="{color: white}" align="center">Sorry, your browser doesn't support canvas. Please try another.</p>
                        </canvas>
                    </td>
                </tr>
            </table>
        </form>
    </div>
    <script>
        // Create new wheel object specifying the parameters at creation time.
        let theWheel = new Winwheel({
            'numSegments': 8,     // Specify number of segments.
            'outerRadius': 212,   // Set outer radius so wheel fits inside the background.
            'textFontSize': 28,    // Set font size as desired.
            'segments':        // Define segments including colour and text.
                [
                    { 'fillStyle': '#eae56f', 'text': '?' },
                    { 'fillStyle': '#89f26e', 'text': '?' },
                    { 'fillStyle': '#7de6ef', 'text': '?' },
                    { 'fillStyle': '#e7706f', 'text': '?' },
                    { 'fillStyle': '#eae56f', 'text': '?' },
                    { 'fillStyle': '#89f26e', 'text': '?' },
                    { 'fillStyle': '#7de6ef', 'text': '?' },
                    { 'fillStyle': '#e7706f', 'text': '?' }
                ],
            'animation':           // Specify the animation to use.
            {
                'type': 'spinToStop',
                'duration': 15,
                'spins': 8,
                'callbackFinished': alertPrize,
                'callbackSound': playSound,   // Function to call when the tick sound is to be triggered.
                'soundTrigger': 'pin'        // Specify pins are to trigger the sound, the other option is 'segment'.
            },
            'pins':
            {
                'number': 16   // Number of pins. They space evenly around the wheel.
            }
        });

        // -----------------------------------------------------------------
        // This function is called when the segment under the prize pointer changes
        // we can play a small tick sound here like you would expect on real prizewheels.
        // -----------------------------------------------------------------
        let audio = new Audio('tick.mp3');  // Create audio object and load tick.mp3 file.

        function playSound() {
            // Stop and rewind the sound if it already happens to be playing.
            audio.pause();
            audio.currentTime = 0;

            // Play the sound.
            audio.play();
        }

        // -------------------------------------------------------
        // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters
        // note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.
        // -------------------------------------------------------
        // Phần này là bắt event kết quả
        function alertPrize(indicatedSegment) {
            // Do basic alert of the segment text.
            // You would probably want to do something more interesting with this information.
            document.getElementById("rewardForm").submit();
        }

        // =======================================================================================================================
        // Code below for the power controls etc which is entirely optional. You can spin the wheel simply by
        // calling theWheel.startAnimation();
        // =======================================================================================================================
        let wheelPower = 0;
        let wheelSpinning = false;

        // -------------------------------------------------------
        // Function to handle the onClick on the power buttons.
        // -------------------------------------------------------
        function powerSelected(powerLevel) {
            // Ensure that power can't be changed while wheel is spinning.
            if (wheelSpinning == false) {
                // Reset all to grey incase this is not the first time the user has selected the power.
                document.getElementById('pw1').className = "";
                document.getElementById('pw2').className = "";
                document.getElementById('pw3').className = "";

                // Now light up all cells below-and-including the one selected by changing the class.
                if (powerLevel >= 1) {
                    document.getElementById('pw1').className = "pw1";
                }

                if (powerLevel >= 2) {
                    document.getElementById('pw2').className = "pw2";
                }

                if (powerLevel >= 3) {
                    document.getElementById('pw3').className = "pw3";
                }

                // Set wheelPower var used when spin button is clicked.
                wheelPower = powerLevel;

                // Light up the spin button by changing it's source image and adding a clickable class to it.
                document.getElementById('spin_button').src = "\\spinwheel\\spin_on.png";
                document.getElementById('spin_button').className = "clickable";
            }
        }

        // -------------------------------------------------------
        // Click handler for spin button.
        // -------------------------------------------------------
        function startSpin() {
            // Ensure that spinning can't be clicked again while already running.
            if (wheelSpinning == false) {
                // Based on the power level selected adjust the number of spins for the wheel, the more times is has
                // to rotate with the duration of the animation the quicker the wheel spins.
                if (wheelPower == 1) {
                    theWheel.animation.spins = 3;
                } else if (wheelPower == 2) {
                    theWheel.animation.spins = 8;
                } else if (wheelPower == 3) {
                    theWheel.animation.spins = 15;
                }

                // Disable the spin button so can't click again while wheel is spinning.
                document.getElementById('spin_button').src = "\\spinwheel\\spin_off.png";
                document.getElementById('spin_button').className = "";

                // Begin the spin animation by calling startAnimation on the wheel object.
                theWheel.startAnimation();

                // Set to true so that power can't be changed and spin button re-enabled during
                // the current animation. The user will have to reset before spinning again.
                wheelSpinning = true;
            }
        }

        // -------------------------------------------------------
        // Function for reset button.
        // -------------------------------------------------------
        function resetWheel() {
            theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
            theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
            theWheel.draw();                // Call draw to render changes to the wheel.

            document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
            document.getElementById('pw2').className = "";
            document.getElementById('pw3').className = "";

            wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
        }


    </script>
    <script type="text/javascript">
        $(window).on('load', function () {
            var coin = this.document.getElementById("coin").value;
            this.console.log(coin);
            if (coin != '') {
                $('#prizeModal').modal('show');
            }
        });
    </script>
</body>

</html>
